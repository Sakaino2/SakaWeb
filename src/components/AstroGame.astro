---

---

<div id="unity-container" class="unity-desktop">
  <canvas id="unity-canvas" width="960" height="600"> </canvas>
  <div id="unity-loading-bar">
    <div id="unity-logo"></div>
    <div id="unity-progress-bar-empty">
      <div id="unity-progress-bar-full"></div>
    </div>
  </div>
  <div id="unity-warning"></div>
  <div id="unity-footer">
    <div id="unity-fullscreen-button"></div>
  </div>
</div>

<script is:inline>
  const container = document.querySelector("#unity-container");
  const canvas = document.querySelector("#unity-canvas");
  const loadingBar = document.querySelector("#unity-loading-bar");
  const progressBarFull = document.querySelector("#unity-progress-bar-full");
  const fullscreenButton = document.querySelector("#unity-fullscreen-button");
  const warningBanner = document.querySelector("#unity-warning");

  // Shows a temporary message banner/ribbon for a few seconds, or
  // a permanent error message on top of the canvas if type=='error'.
  // If type=='warning', a yellow highlight color is used.
  // Modify or remove this function to customize the visually presented
  // way that non-critical warnings and error messages are presented to the
  // user.
  function unityShowBanner(msg, type) {
    function updateBannerVisibility() {
      warningBanner.style.display = warningBanner.children.length
        ? "block"
        : "none";
    }
    var div = document.createElement("div");
    div.innerHTML = msg;
    warningBanner.appendChild(div);
    if (type == "error") div.style = "background: red; padding: 10px;";
    else {
      if (type == "warning") div.style = "background: yellow; padding: 10px;";
      setTimeout(function () {
        warningBanner.removeChild(div);
        updateBannerVisibility();
      }, 5000);
    }
    updateBannerVisibility();
  }

  let buildUrl = "Build";
  let loaderUrl = buildUrl + "/Chimeras.loader.js";
  let config = {
    dataUrl: buildUrl + "/webgl.data",
    frameworkUrl: buildUrl + "/build.framework.js",
    codeUrl: buildUrl + "/build.wasm",
    streamingAssetsUrl: "StreamingAssets",
    companyName: "OincSAC",
    productName: "Prototipo",
    productVersion: "0.1",
    showBanner: unityShowBanner,
    matchWebGLToCanvasSize: false,
  };

  // By default Unity keeps WebGL canvas render target size matched with
  // the DOM size of the canvas element (scaled by window.devicePixelRatio)
  // Set this to false if you want to decouple this synchronization from
  // happening inside the engine, and you would instead like to size up
  // the canvas DOM size and WebGL render target sizes yourself.
  // config.matchWebGLToCanvasSize = false;

  if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
    // Mobile device style: fill the whole browser client area with the game canvas:
    let meta = document.createElement("meta");
    meta.name = "viewport";
    meta.content =
      "width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes";
    document.getElementsByTagName("head")[0].appendChild(meta);
    container.className = "unity-mobile";
    canvas.className = "unity-mobile";

    // To lower canvas resolution on mobile devices to gain some
    // performance, uncomment the following line:
    // config.devicePixelRatio = 1;
  } else {
    // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:

    canvas.style.width = "100%";
  }

  loadingBar.style.display = "grid";

  let script = document.createElement("script");
  script.src = loaderUrl;
  script.onload = () => {
    createUnityInstance(canvas, config, (progress) => {
      progressBarFull.style.width = 100 * progress + "%";
    })
      .then((unityInstance) => {
        loadingBar.style.display = "none";
        fullscreenButton.onclick = () => {
          unityInstance.SetFullscreen(1);
        };
      })
      .catch((message) => {
        alert(message);
      });
  };
  document.body.appendChild(script);
</script>

<style>
  #unity-container {
    width: 100%;
    display: grid;
    align-items: center;
  }

  #unity-canvas {
    align-items: center;
    width: 100%;
    grid-column: 1;
    grid-row: 1;
    background: #231f20;
  }

  #unity-loading-bar {
    display: grid;
    grid-column: 1;
    grid-row: 1;
    align-items: center;
    justify-content: center;
  }

  #unity-logo {
    width: 154px;
    height: 130px;
    background: url("TemplateData/unity-logo-dark.png") no-repeat center;
  }

  #unity-progress-bar-empty {
    width: 141px;
    height: 18px;
    margin-top: 10px;
    margin-left: 6.5px;
    background: url("TemplateData/progress-bar-empty-dark.png") no-repeat center;
  }

  #unity-progress-bar-full {
    width: 0%;
    height: 18px;
    background: url("TemplateData/progress-bar-full-dark.png") no-repeat center;
  }

  #unity-footer {
    grid-column: 1;
    grid-row: 1;
    align-self: flex-end;
  }

  #unity-build-title {
    float: right;
    margin-right: 10px;
    line-height: 38px;
    font-family: arial;
    font-size: 18px;
  }

  #unity-fullscreen-button {
    float: right;
    width: 38px;
    height: 38px;
    background: url("TemplateData/fullscreen-button.png") no-repeat center;
  }
</style>
